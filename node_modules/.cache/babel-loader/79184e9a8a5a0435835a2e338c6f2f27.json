{"ast":null,"code":"const http = async function (url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let body = arguments.length > 2 ? arguments[2] : undefined;\n  let headers = arguments.length > 3 ? arguments[3] : undefined;\n\n  try {\n    if (body) {\n      body = JSON.stringify(body);\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const response = await fetch(url, {\n      method: method,\n      headers: headers,\n      body: body\n    });\n    const parsedData = await response.json();\n    return parsedData;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport { http };","map":{"version":3,"names":["http","url","method","body","headers","JSON","stringify","response","fetch","parsedData","json","error","console","log","message"],"sources":["C:/Users/Hanna/Desktop/teest/ui.tm/src/hooks/http.hooks.js"],"sourcesContent":["const http = async (url, method ='', body, headers) => {\r\n    try {\r\n        if (body) {\r\n            body = JSON.stringify(body);\r\n            headers['Content-Type'] = 'application/json';\r\n        }\r\n\r\n        const response = await fetch(url, { method: method, headers: headers, body: body });\r\n        const parsedData = await response.json();\r\n        return parsedData;\r\n\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\nexport { http };"],"mappings":"AAAA,MAAMA,IAAI,GAAG,gBAAOC,GAAP,EAA0C;EAAA,IAA9BC,MAA8B,uEAAtB,EAAsB;EAAA,IAAlBC,IAAkB;EAAA,IAAZC,OAAY;;EACnD,IAAI;IACA,IAAID,IAAJ,EAAU;MACNA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;MACAC,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;IACH;;IAED,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;MAAEC,MAAM,EAAEA,MAAV;MAAkBE,OAAO,EAAEA,OAA3B;MAAoCD,IAAI,EAAEA;IAA1C,CAAN,CAA5B;IACA,MAAMM,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAzB;IACA,OAAOD,UAAP;EAEH,CAVD,CAUE,OAAOE,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACH;AACJ,CAdD;;AAeA,SAASd,IAAT"},"metadata":{},"sourceType":"module"}